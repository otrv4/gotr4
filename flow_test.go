package gotr4

import (
	"time"

	"github.com/otrv4/gotrx"
	. "gopkg.in/check.v1"
)

func (s *GotraSuite) Test_basicFlow_onlineWithQueryMessage(c *C) {
	// TODO: we'll have to add assertions of everything here later

	rand := gotrx.FixtureRand()

	alice := &conversation{r: rand, state: stateStart{}}
	bob := &conversation{r: rand, state: stateStart{}}
	cp1 := alice.getValidClientProfile()
	cp1.Expiration = time.Date(2028, 11, 5, 13, 46, 00, 13, time.UTC)
	cp1.Sig = gotrx.CreateEddsaSignature(cp1.GenerateSignature(alice.getKeypair()))

	cp2 := bob.getValidClientProfile()
	cp2.Expiration = time.Date(2028, 12, 5, 13, 46, 00, 13, time.UTC)
	cp2.Sig = gotrx.CreateEddsaSignature(cp1.GenerateSignature(bob.getKeypair()))

	c.Assert(alice.state, FitsTypeOf, stateStart{})
	c.Assert(bob.state, FitsTypeOf, stateStart{})

	aliceQuery := alice.QueryMessage()
	c.Assert(aliceQuery, Not(IsNil))

	bobPlain1, bobIdentity, bobErr1 := bob.Receive(aliceQuery)
	c.Assert(bobPlain1, IsNil)
	c.Assert(bobErr1, IsNil)
	c.Assert(bobIdentity, HasLen, 1)
	c.Assert(msgDecode(bobIdentity[0]), DeepEquals, []byte{
		// version
		0x0, 0x4,

		// message type
		0x35,

		// sender (bob) instance tag
		0x1, 0x2, 0x3, 0x4,

		// receiver (alice) instance tag
		0x0, 0x0, 0x0, 0x0,

		// client profile

		//   number of fields
		0x0, 0x0, 0x0, 0x4,

		//   instance tag
		0x0, 0x1,
		0x1, 0x2, 0x3, 0x4,

		//   public key
		0x0, 0x2,
		0x0, 0x10,
		0x32, 0x20, 0x3f, 0xb5, 0x6e, 0x4, 0xc9, 0x64,
		0x86, 0x5b, 0xa5, 0x80, 0xac, 0x9d, 0x53, 0xef,
		0x21, 0x6, 0x27, 0xda, 0xc3, 0x9f, 0xb5, 0xe,
		0xe7, 0x97, 0x2e, 0xc5, 0x4b, 0xd5, 0x1e, 0x75,
		0x5b, 0x60, 0x3f, 0x9d, 0x67, 0xb6, 0xf4, 0x16,
		0xca, 0x9a, 0xc5, 0xde, 0x4e, 0x61, 0x14, 0xbd,
		0xdf, 0x61, 0xf5, 0x34, 0x93, 0x49, 0x9f, 0x79,
		0x80,

		//   versions
		0x0, 0x4,
		0x0, 0x0, 0x0, 0x1,
		0x4,

		//   expiry
		0x0, 0x5,
		0x0, 0x0, 0x0, 0x0, 0x6e, 0xd7, 0xce, 0x18,

		//   signature
		0x5f, 0x8b, 0x29, 0x76, 0xa5, 0x2d, 0x42, 0xd3,
		0x01, 0x16, 0xf9, 0x62, 0x82, 0xfe, 0xc5, 0xae,
		0x26, 0xe7, 0x7a, 0x7f, 0xa5, 0x63, 0xb5, 0x71,
		0x52, 0x69, 0x83, 0x95, 0x86, 0xf2, 0xab, 0xf4,
		0xb8, 0x74, 0x94, 0xa0, 0x22, 0x04, 0x9a, 0x7c,
		0xcc, 0x7a, 0x67, 0xbb, 0x97, 0x7c, 0x5d, 0x55,
		0x87, 0x36, 0x3f, 0x37, 0x1b, 0x79, 0x82, 0xf9,
		0x00, 0x11, 0xa4, 0x75, 0x28, 0x15, 0x0c, 0x0d,
		0xc2, 0xe5, 0x7a, 0x1f, 0x7e, 0x13, 0x4f, 0x38,
		0x1a, 0x6c, 0x09, 0x65, 0xfa, 0x4e, 0xcb, 0xd1,
		0xd4, 0xac, 0x39, 0x10, 0x1e, 0x48, 0x4d, 0x27,
		0x7f, 0x32, 0x10, 0x43, 0xdc, 0xfb, 0x2a, 0xd2,
		0x06, 0x6e, 0x8b, 0x6e, 0x27, 0x32, 0xed, 0xc2,
		0x57, 0x4c, 0xd2, 0x48, 0x0d, 0x8b, 0x62, 0xa7,
		0x28, 0x00,

		// y
		0x71, 0xb1, 0x8a, 0xb3, 0x67, 0xba, 0x26, 0xea,
		0x19, 0x81, 0x55, 0xb8, 0x63, 0x85, 0x16, 0x2e,
		0x26, 0xec, 0x5d, 0xda, 0xa9, 0xe2, 0x3, 0x15,
		0xaa, 0x61, 0xf7, 0x98, 0x37, 0x69, 0x6c, 0x23,
		0x2a, 0x8c, 0x36, 0xe, 0x8a, 0x3c, 0x60, 0x8d,
		0xd8, 0x18, 0x4a, 0x1b, 0x62, 0x26, 0xe0, 0x87,
		0x3e, 0x84, 0xcd, 0x97, 0xa1, 0x22, 0xd6, 0x29,
		0x0,

		// b
		0x0, 0x0, 0x1, 0x80,
		0xf0, 0x76, 0x2e, 0x6c, 0x7, 0xad, 0xe, 0xaf,
		0xb9, 0x96, 0x44, 0xce, 0x20, 0xe5, 0xb8, 0xe3,
		0x72, 0xb6, 0xcc, 0x7f, 0xfc, 0x30, 0x6a, 0xfa,
		0xc0, 0xb9, 0x14, 0x5d, 0x14, 0x28, 0x78, 0x1d,
		0xb7, 0x45, 0x13, 0xe0, 0xd6, 0x3f, 0xbe, 0xd9,
		0x42, 0x1a, 0xca, 0xee, 0x8a, 0x2d, 0x82, 0xc0,
		0x17, 0xc9, 0x10, 0xa4, 0x54, 0x7b, 0x84, 0xd6,
		0x00, 0x1e, 0x73, 0x99, 0x6d, 0x54, 0x06, 0x01,
		0x4c, 0x4f, 0xbb, 0xe2, 0x2c, 0x8e, 0x4c, 0x35,
		0x4, 0x8b, 0x4a, 0xfb, 0x8e, 0x61, 0xe2, 0x4b,
		0xb2, 0xc4, 0x17, 0x1b, 0xa8, 0x8, 0x17, 0xa8,
		0xf5, 0xac, 0x4b, 0x7, 0x88, 0x89, 0x69, 0xc8,
		0x45, 0xfe, 0x4d, 0x1b, 0x37, 0xc, 0x72, 0xcf,
		0x2f, 0xa1, 0xfa, 0x93, 0x4d, 0x49, 0x77, 0xa4,
		0xdf, 0xac, 0x7c, 0xc4, 0x42, 0x35, 0x33, 0x30,
		0x2d, 0x36, 0xc, 0x20, 0xbb, 0xf4, 0xfc, 0xf4,
		0x3b, 0x7b, 0x6f, 0xc, 0xf6, 0x59, 0x29, 0x79,
		0xbd, 0x42, 0x6a, 0xbf, 0xea, 0x9f, 0x16, 0x7a,
		0xfe, 0xa5, 0x70, 0x5b, 0x85, 0x4f, 0x87, 0xf0,
		0xf0, 0x3a, 0x67, 0xa6, 0xb7, 0x54, 0xa6, 0xc6,
		0xd5, 0x2b, 0x82, 0x12, 0x54, 0x3, 0xda, 0xdd,
		0x8, 0xb7, 0x29, 0xf3, 0xc7, 0xa5, 0xd2, 0x6e,
		0x1, 0xd3, 0x75, 0xb, 0x98, 0x28, 0xe7, 0x51,
		0x6d, 0x5d, 0x42, 0xa4, 0xcb, 0xfa, 0xc8, 0x89,
		0x1d, 0x92, 0x9, 0x4e, 0xd5, 0xb1, 0xfa, 0xa,
		0x8f, 0x4e, 0xe5, 0x64, 0x66, 0x56, 0x66, 0x78,
		0xc, 0x86, 0x31, 0xe0, 0x1e, 0xda, 0xe1, 0xd6,
		0xa7, 0x59, 0xab, 0x72, 0x3e, 0xaf, 0x14, 0xdc,
		0x37, 0xeb, 0x79, 0xe7, 0xb1, 0x99, 0x9a, 0x7f,
		0x8f, 0x4a, 0xbb, 0xf5, 0x9d, 0x33, 0xd0, 0xb7,
		0xc5, 0x6d, 0x7c, 0x18, 0xf3, 0x61, 0x82, 0xa8,
		0x94, 0xcf, 0x77, 0xe2, 0xc5, 0x1e, 0x12, 0x0e,
		0x03, 0x56, 0xda, 0x20, 0x34, 0xc0, 0xfb, 0x0d,
		0x8c, 0x43, 0xec, 0xe0, 0x60, 0x1b, 0xc9, 0x9e,
		0x1e, 0xe5, 0xa0, 0xa0, 0x8e, 0xa5, 0xe0, 0x5c,
		0xcd, 0xd7, 0xb0, 0xe9, 0x9c, 0x5e, 0xbc, 0x90,
		0x2a, 0x40, 0x4c, 0x75, 0x9a, 0xc7, 0x6d, 0xe4,
		0x8, 0x90, 0x7c, 0x64, 0xb2, 0xb6, 0x21, 0x81,
		0x5f, 0x87, 0x58, 0xf1, 0x4b, 0x1, 0xc6, 0xb7,
		0x6d, 0x30, 0x4, 0x19, 0xf6, 0x6e, 0x84, 0xd2,
		0xeb, 0x3f, 0x4d, 0xa3, 0x70, 0x9e, 0xf9, 0x23,
		0xa6, 0x30, 0x7f, 0x7b, 0xc5, 0xea, 0x25, 0x3e,
		0xd8, 0xdc, 0x7, 0x40, 0x82, 0xf2, 0x44, 0xb4,
		0x69, 0xa8, 0x13, 0xcf, 0xa4, 0x3a, 0xc9, 0x9b,
		0x7c, 0xe8, 0xb8, 0xc, 0x1f, 0xb1, 0x7a, 0xe5,
		0xa1, 0x1c, 0xa, 0x59, 0xd3, 0xe3, 0xa0, 0xb,
		0xdc, 0x90, 0xf3, 0xde, 0x1d, 0x37, 0x3, 0x39,
		0x1d, 0xce, 0x43, 0xd1, 0x94, 0x59, 0xb, 0xa8,
	})

	c.Assert(bob.state, FitsTypeOf, stateWaitingAuthR{})
	// TODO: continue here, check internals of bob conversation

	alicePlain1, aliceAuthR, aliceErr1 := alice.Receive(bobIdentity[0])
	c.Assert(alicePlain1, IsNil)
	c.Assert(aliceErr1, IsNil)
	c.Assert(aliceAuthR, HasLen, 1)
	c.Assert(alice.state, FitsTypeOf, stateWaitingAuthI{})

	bobPlain2, bobAuthI, bobErr2 := bob.Receive(aliceAuthR[0])
	c.Assert(bobPlain2, IsNil)
	c.Assert(bobErr2, IsNil)
	c.Assert(bobAuthI, HasLen, 1)
	c.Assert(bob.state, FitsTypeOf, stateWaitingDakeDataMessage{})

	alicePlain2, aliceDakeData, aliceErr2 := alice.Receive(bobAuthI[0])
	c.Assert(alicePlain2, IsNil)
	c.Assert(aliceErr2, IsNil)
	c.Assert(aliceDakeData, HasLen, 1)
	c.Assert(alice.state, FitsTypeOf, stateEncrypted{})

	bobPlain3, bobToSend1, bobErr3 := bob.Receive(aliceDakeData[0])
	c.Assert(bobPlain3, HasLen, 0)
	c.Assert(bobErr3, IsNil)
	c.Assert(bobToSend1, HasLen, 0)
	c.Assert(bob.state, FitsTypeOf, stateEncrypted{})

	// We are now ready to do stuff

	aliceToSend1, aliceErr3 := alice.Send(MessagePlaintext("hello there, Bob - how's life?"))
	c.Assert(aliceErr3, IsNil)
	c.Assert(aliceToSend1, HasLen, 1)

	aliceToSend2, aliceErr4 := alice.Send(MessagePlaintext("wanted to say something"))
	c.Assert(aliceErr4, IsNil)
	c.Assert(aliceToSend2, HasLen, 1)

	bobPlain4, bobToSend2, bobErr4 := bob.Receive(aliceToSend1[0])
	c.Assert(bobPlain4, DeepEquals, MessagePlaintext("hello there, Bob - how's life?"))
	c.Assert(bobErr4, IsNil)
	c.Assert(bobToSend2, HasLen, 0)

	bobPlain5, bobToSend3, bobErr5 := bob.Receive(aliceToSend2[0])
	c.Assert(bobPlain5, DeepEquals, MessagePlaintext("wanted to say something"))
	c.Assert(bobErr5, IsNil)
	c.Assert(bobToSend3, HasLen, 0)

	bobToSend4, bobErr4 := bob.Send(MessagePlaintext("oh yeah, what's that?"))
	c.Assert(bobErr4, IsNil)
	c.Assert(bobToSend4, HasLen, 1)

	alicePlain3, aliceToSend3, aliceErr5 := alice.Receive(bobToSend4[0])
	c.Assert(alicePlain3, DeepEquals, MessagePlaintext("oh yeah, what's that?"))
	c.Assert(aliceErr5, IsNil)
	c.Assert(aliceToSend3, HasLen, 0)

	aliceToSend4, aliceErr6 := alice.Send(MessagePlaintext("I wanted to say hello"))
	c.Assert(aliceErr6, IsNil)
	c.Assert(aliceToSend4, HasLen, 1)

	aliceToSend5, aliceErr7 := alice.End()
	c.Assert(aliceErr7, IsNil)
	c.Assert(aliceToSend5, HasLen, 1)
	c.Assert(alice.state, FitsTypeOf, stateStart{})

	bobPlain6, bobToSend5, bobErr6 := bob.Receive(aliceToSend4[0])
	c.Assert(bobPlain6, DeepEquals, MessagePlaintext("I wanted to say hello"))
	c.Assert(bobErr6, IsNil)
	c.Assert(bobToSend5, HasLen, 0)

	bobPlain7, bobToSend6, bobErr7 := bob.Receive(aliceToSend5[0])
	c.Assert(bobPlain7, HasLen, 0)
	c.Assert(bobErr7, IsNil)
	c.Assert(bobToSend6, HasLen, 0)
	c.Assert(bob.state, FitsTypeOf, stateFinished{})
}
